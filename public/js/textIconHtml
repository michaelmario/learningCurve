/*<div id="icons">
          <script>
          /* set low/high range using the numbers below 
          for(var i=900; i < 12175; i++){
              document.write("<div>");
              document.write("&amp;#"+i+";");
              document.write("<b>&#"+i+";</b>");
              document.write("</div>");
          }
          </script>*/

           if (!('serviceWorker' in navigator)) {
       console.log('Service worker not supported');};
     if('serviceWorker' in navigator) {
      navigator.serviceWorker.register('sw.js').then(function(registration) {
    console.log('ServiceWorker registration successful with scope: ', registration);
    }, function(err) {
    console.log('ServiceWorker registration failed: ', err);
    });
    }
   self.addEventListener("install", function(e) {
  console.log('[ServiceWorker] Installed');
  
});
self.addEventListener('activated', function(e) {
  console.log("[serviceworker], Activated")
  e.waitUntil(
    caches.keys().then(function(cacheNames){
      return Promise.all(cacheNames.map(function(thisCacheName){
     if (thisCacheName !== cacheName){
       console.log("[Serviceworker] removing cached files from", thisCacheName)
      return caches.delete(thisCacheName);
       }
      }))
    })
  )
})
 self.addEventListener('fetch', function(e) {
  console.log("[serviceworker]  fetching", e.request.url);
  e.respondWith(
    caches.match(e.request).then(function(response){
      if(response){
        console.log('[serviceworker] found in cache',e.request.url,response);
      return response;
      }
     var requestClone = e.request.clone();
      fetch(requestClone).then(function(response){
         if(!response){
           console.log("serviceworker no response from fetch");
           return response;
         }
         var responseClone = response.clone();
         caches.open(cacheName).then(function(cache) {
          cache.put(e.request, responseClone);
          return response;
         });
       })
       .catch(function(err){
         console.log("[servicework] error fetching & caching new")
       });
    })
  );
});